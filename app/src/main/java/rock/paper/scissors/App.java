/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rock.paper.scissors;

import javafx.scene.layout.AnchorPane;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.stage.Stage;
import jep.Interpreter;
import jep.JepException;
import jep.SharedInterpreter;
import org.bytedeco.opencv.opencv_core.Mat;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;

public class App extends Application{

    static LinkedList<IShutDownListener> shutdownListeners;
    static LinkedList<IScreenChangeListener> scrnChangeListeners;
    static final int VIDEO_SCREEN = 1;
    static AnchorPane root;
    static ArrayList<AnchorPane> screens; //stores all the different screens
    static int currentScreenIndex;
    static Mat webcamImage;

    @Override
    public void start(Stage stage) throws IOException {
        root = (AnchorPane) FXMLLoader.load(getClass().getResource("anchor.fxml"));
        screens.add((AnchorPane) FXMLLoader.load(getClass().getResource("gui-start.fxml")));
        screens.add((AnchorPane) FXMLLoader.load(getClass().getResource("gui-play.fxml")));

        root.getChildren().add(screens.get(0)); //add start window
        Scene scene = new Scene(root, 640, 400);

        stage.setOnCloseRequest(windowEvent -> {
            alertShutDownListeners();
            stage.close();
        });

        stage.setTitle("Rock Paper Scissors!");
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {

        shutdownListeners = new LinkedList<>();
        scrnChangeListeners = new LinkedList<>();
        screens = new ArrayList<>();
        currentScreenIndex = 0;
        launch();
    }
    public static void addScrnChangeListener(IScreenChangeListener listener){
        scrnChangeListeners.add(listener);
    }
    public static void alertScrnChangeListeners(){
        for (IScreenChangeListener listener: scrnChangeListeners) {
            listener.onScreenChange(currentScreenIndex);
        }
    }

    public static void addShutDownListener(IShutDownListener listener){
        shutdownListeners.add(listener);
    }
    public static void alertShutDownListeners(){
        for (IShutDownListener listener: shutdownListeners) {
            listener.onShutDown();
        }
    }

    public static AnchorPane getScreen(int i){
        return screens.get(i);
    }

    public static void setScreen(int i){
        root.getChildren().remove(currentScreenIndex);
        root.getChildren().add(getScreen(i));
        currentScreenIndex = i;
        alertScrnChangeListeners();
    }

}
